

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
      - "9229:9229" # Node.js debugger
    environment:
      NODE_ENV: development
      MONGO_URI: mongodb://mongo:27017/mini-ai-studio
      JWT_SECRET: devsecret
      UPLOAD_DIR: /data/uploads
    volumes:
      - ./backend:/app          # Live code reloading
      - /app/node_modules       # Prevent node_modules overwrite
      - backend-upload:/data/uploads
    depends_on:
      - mongo                   # Only wait for container, no health dependency
    command: sh -c "sleep 1000 && npm run dev"
    # Added 'sleep 5' → gives Mongo a few seconds to start up before backend connects
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:4000
    volumes:
      - ./frontend:/app
      - /app/node_modules        # prevent overwriting node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true
    command: npm run dev -- --host 0.0.0.0
    networks:
      - app-network

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: mini-ai-studio
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - app-network
    restart: unless-stopped
    # Healthcheck commented out — avoids frequent check-ins and container noise
    # healthcheck:
    #   test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 20s

volumes:
  mongo-data:
  mongo-config:
  backend-upload:

networks:
  app-network:
    driver: bridge
